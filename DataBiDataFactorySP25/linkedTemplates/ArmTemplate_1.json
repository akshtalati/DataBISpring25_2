{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataBiDataFactorySP25"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_2_Flattened_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable3",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          nconst as string,",
						"          primaryName as string,",
						"          birthYear as integer,",
						"          deathYear as integer,",
						"          primaryProfession as string,",
						"          knownForTitles as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 derive(knownForTitles = split(knownForTitles,',')) ~> derivedColumn1",
						"derivedColumn1 foldDown(unroll(knownForTitles),",
						"     mapColumn(",
						"          nconst,",
						"          primaryName,",
						"          birthYear,",
						"          deathYear,",
						"          primaryProfession,",
						"          knownForTitles",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 keyGenerate(output(NameBasicSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          NCONST as string,",
						"          PRIMARYNAME as string,",
						"          BIRTHYEAR as decimal(38,0),",
						"          DEATHYEAR as decimal(38,0),",
						"          PRIMARYPROFESSION as string,",
						"          KNOWNFORTITLES as string,",
						"          NAMEBASICSK as decimal(38,0)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          NCONST = nconst,",
						"          PRIMARYNAME = primaryName,",
						"          BIRTHYEAR = birthYear,",
						"          DEATHYEAR = deathYear,",
						"          PRIMARYPROFESSION = primaryProfession,",
						"          KNOWNFORTITLES = knownForTitles,",
						"          NAMEBASICSK = NameBasicSK",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim1_LATEARRIVAL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dim1FactArrival",
								"type": "DatasetReference"
							},
							"name": "dim1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable6",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as short,",
						"          CustomerName as string,",
						"          billTo as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dim1",
						"dim1 keyGenerate(output(customer_sk as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(DI_CREATEDDT = currentDate(),",
						"          pid = \"0\") ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_SK as decimal(38,0),",
						"          CUSTOMER_ID as decimal(38,0),",
						"          CUSTOMER_NAME as string,",
						"          BILLTO as string,",
						"          DI_CREATEDDT as timestamp,",
						"          PID as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          CUSTOMER_SK = customer_sk,",
						"          CUSTOMER_ID = customerid,",
						"          CUSTOMER_NAME = CustomerName,",
						"          BILLTO = billTo,",
						"          DI_CREATEDDT,",
						"          PID = pid",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_LATEARRIVAL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable7",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          invoiceId as string,",
						"          customerid as string,",
						"          invoiceDate as string,",
						"          ShipTo as string,",
						"          ShipTo_City as string,",
						"          ShipTo_Country as string,",
						"          SalespersonPersonID as string,",
						"          SalespersonName as string,",
						"          total_product_cnt as string,",
						"          Total as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(invoice_sk as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(PID = \"0\",",
						"          DI_CreatedDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          INVOICE_SK as decimal(38,0),",
						"          INVOICE_ID as decimal(38,0),",
						"          CUSTOMER_ID as decimal(38,0),",
						"          INVOICE_DT as date,",
						"          TOTAL_PRODUCT_CNT as decimal(38,0),",
						"          TOTAL_PRODUCT_COST as double,",
						"          DI_CREATEDDT as timestamp,",
						"          PID as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          INVOICE_ID = invoiceId,",
						"          CUSTOMER_ID = customerid,",
						"          INVOICE_DT = invoiceDate,",
						"          TOTAL_PRODUCT_CNT = total_product_cnt,",
						"          TOTAL_PRODUCT_COST = Total,",
						"          INVOICE_SK = invoice_sk,",
						"          PID,",
						"          DI_CREATEDDT = DI_CreatedDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM2_LATEARRIVAL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable6",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as string,",
						"          CustomerName as string,",
						"          billTo as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(customer_sk as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(DI_CREATEDDT = currentDate(),",
						"          PID = \"0\") ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(!isNull(customerid)",
						")) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_SK as decimal(38,0),",
						"          CUSTOMER_ID as decimal(38,0),",
						"          CUSTOMER_NAME as string,",
						"          BILLTO as string,",
						"          DI_CREATEDDT as timestamp,",
						"          PID as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['CUSTOMER_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          CUSTOMER_SK = customer_sk,",
						"          CUSTOMER_ID = customerid,",
						"          CUSTOMER_NAME = CustomerName,",
						"          BILLTO = billTo,",
						"          DI_CREATEDDT,",
						"          PID",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SeattlePetLic_IMDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Parquet_2_Flattened_File",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeSink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "Blob",
									"type": "LinkedServiceReference"
								},
								"path": "bronze"
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Parquet_2_Flattened_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LateArrival')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DIM1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dim1_LATEARRIVAL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dim1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Fact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DIM1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FACT_LATEARRIVAL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DIM2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM2_LATEARRIVAL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dim1_LATEARRIVAL')]",
				"[concat(variables('factoryId'), '/dataflows/FACT_LATEARRIVAL')]",
				"[concat(variables('factoryId'), '/dataflows/DIM2_LATEARRIVAL')]"
			]
		}
	]
}